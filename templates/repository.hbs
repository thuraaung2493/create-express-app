import { PrismaClient, type Prisma } from '@prisma/client';
import {
  PrismaClientKnownRequestError,
  type DefaultArgs,
} from '@prisma/client/runtime/library';

class {{name}}Repository {
  private {{model}}: Prisma.{{capitalizedModel}}Delegate<DefaultArgs>;

  constructor() {
    const prisma = new PrismaClient();
    this.{{model}} = prisma.{{model}};
  }

  async create(data: Prisma.{{capitalizedModel}}CreateInput) {
    try {
      return await this.{{model}}.create({ data });
    } catch (error) {
      if (error instanceof PrismaClientKnownRequestError) {
        if (error.code === 'P2002') {
          throw new Error('A new {{model}} cannot be created');
        }
      } else {
        throw new Error('Something went wrong!');
      }
    }
  }

  async first(where: Prisma.{{capitalizedModel}}WhereInput) {
    return this.{{model}}.findFirst({ where });
  }

  async all(args: Prisma.{{capitalizedModel}}FindManyArgs) {
    return this.{{model}}.findMany(args);
  }
}

export default new {{name}}Repository();
